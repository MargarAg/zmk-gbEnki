/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
    macros {
        numdot: numdot {
            label = "ZM_numdot";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N4 &kp KP_N6>,
                <&macro_release>,
                <&kp LALT>;
        };

        grtsgn: grtsgn {
            label = "ZM_grtsgn";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N6 &kp KP_N2>,
                <&macro_release>,
                <&kp LALT>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------
            //| LGUI/] |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | RGUI/[ | 
            //| CTRL/` |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | CTRL/' |
            //| LALT/\ |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT/- |
            //                             | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&none  &kp Q        &kp W       &kp E       &kp R           &kp T          &kp Y      &kp U        &kp I        &kp O       &kp P           &kp BACKSPACE
&none  &mt LCTRL A  &mt LALT S  &mt LCMD D  &mt LSHFT F     &kp G          &kp H      &mt LSHFT J  &mt LGUI K   &mt LALT L  &mt LCTRL SEMI  &kp SQT
&none  &kp Z        &kp X       &kp C       &kp V           &kp B          &kp N      &kp M        &kp COMMA    &kp DOT     &kp FSLH        &kp LBKT
                                &kp TAB     &kp LEFT_SHIFT  &lt 4 SPACE    &kp ENTER  &lt 2 SPACE  &lt 1 SPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            //|LGUI/CAPS |  *  |  7 |  8  |  9  |  +  |    |  !  |  @  |  #  |  $  |  %  | RGUI/F1 |
            //|CTRL/MENU |  /  |  4 |  5  |  6  |  -  |    |  ^  |  &  |  *  |  (  |  )  | CTRL/F2 |
            //|  LALT/=  |  0  |  1 |  4  |  3  |  .  |    |  ls |  F4 |  F5 |  F6 |  F7 | RALT/F3 |
            //                      | ADJ | ___ | ___ |    | ___ | ___ | ADJ |

            bindings = <
&trans  &kp N1      &kp N2  &kp NUMBER_3  &kp NUMBER_4  &kp N5     &kp N6        &kp N7        &kp N8      &kp N9         &kp N0             &trans
&trans  &kp CAPS    &trans  &trans        &trans        &trans     &kp LEFT      &kp DOWN      &kp UP      &kp RIGHT      &trans             &kp C_VOLUME_UP
&trans  &kp ESCAPE  &trans  &trans        &trans        &numdot    &kp LC(LEFT)  &kp LC(DOWN)  &kp LC(UP)  &kp LC(RIGHT)  &kp LC(LG(SPACE))  &kp C_VOLUME_DOWN
                            &trans        &trans        &trans     &trans        &trans        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            //| LGUI |  VOLU  |  PGUP  | PLAY | HOME | ___  |            | ___  | HOME | PLAY| PGUP | VOLU | RGUI |
            //| CTRL |  VOLD  |  LEFT  |  UP  | DOWN | RGHT |            | RGHT | DOWN | UP  | LEFT | VOLD | CTRL | 
            //| LALT |  MUTE  |  PGDN  |  ___ | END  | ___  |            | ___  | END  | ___ | PGDN | MUTE | RALT |
            //                          | ___ | ___  | ADJ  |            | ADJ  | ___  | ___ |

            bindings = <
&trans  &kp LS(N1)    &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp LS(N6)     &kp LS(N7)     &kp LS(N8)    &kp LS(N9)    &kp LS(N0)    &trans
&trans  &kp CAPSLOCK  &trans      &trans      &trans      &trans        &kp MINUS      &kp EQUAL      &kp LBKT      &kp RBKT      &kp BSLH      &kp GRAVE
&trans  &kp ESCAPE    &trans      &trans      &trans      &trans        &kp LS(MINUS)  &kp LS(EQUAL)  &kp LS(LBKT)  &kp LS(RBKT)  &kp LS(BSLH)  &kp LS(GRAVE)
                                  &trans      &trans      &trans        &trans         &trans         &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            //| BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR |
            //| BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //|pwrOFF|NUMLK|     |     |     |     |   |     |     |     |     |     |      |
            //                   |     |     |     |   |     |     |     |

            bindings = <
&bootloader        &none         &none         &none         &none  &none         &out OUT_BLE  &out OUT_USB  &out OUT_TOG  &none         &none         &bootloader
&bt BT_CLR         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &none         &none         &none         &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&ext_power EP_OFF  &kp KP_NUM    &none         &none         &none  &check_bat    &check_bat    &none         &none         &none         &none         &ext_power EP_OFF
                                               &trans        &none  &trans        &trans        &none         &trans
            >;
        };

        number_layer {
            bindings = <
&trans  &kp KP_EQUAL  &kp KP_PLUS   &kp N7  &kp N8  &kp N9    &trans  &trans  &trans  &trans  &bt BT_CLR  &bt BT_SEL 0
&trans  &kp CAPS      &kp KP_MINUS  &kp N4  &kp N5  &kp N6    &trans  &trans  &trans  &trans  &check_bat  &bt BT_SEL 1
&trans  &kp ESC       &kp N0        &kp N1  &kp N2  &kp N3    &trans  &trans  &trans  &trans  &trans      &bt BT_SEL 2
                                    &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
